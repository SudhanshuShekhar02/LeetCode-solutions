class Solution {
public:
    int findMax(const vector<int>& piles) {
        int maxi = piles[0];  
        for (int i = 1; i < piles.size(); i++) {
            if (piles[i] > maxi) maxi = piles[i];
        }
        return maxi;
    }

    long long calculateTotalHours(const vector<int>& piles, int hourly) {
        long long totalH = 0; 
        for (int i = 0; i < piles.size(); i++) {
        
            totalH += (piles[i] + hourly - 1) / hourly;
        }
        return totalH;
    }

    int minEatingSpeed(vector<int>& piles, int h) {

        if (piles.empty()) return 0;

        int low = 1;
        int high = findMax(piles);
        int ans = high;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            long long totalH = calculateTotalHours(piles, mid);

            if (totalH <= h) {
                ans = mid;     
                high = mid - 1; 
            } else {
                low = mid + 1; 
            }
        }
        return ans;
    }
};
